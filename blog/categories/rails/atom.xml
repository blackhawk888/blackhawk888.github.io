<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Wivern Blog]]></title>
  <link href="http://blackhawk888.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blackhawk888.github.io/"/>
  <updated>2018-02-05T05:43:52+00:00</updated>
  <id>http://blackhawk888.github.io/</id>
  <author>
    <name><![CDATA[wivern]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RailsでDBをリセットして最初からつくり直す]]></title>
    <link href="http://blackhawk888.github.io/blog/2018/01/18/rails-db-reset/"/>
    <updated>2018-01-18T13:37:29+00:00</updated>
    <id>http://blackhawk888.github.io/blog/2018/01/18/rails-db-reset</id>
    <content type="html"><![CDATA[<p>開発途中にDBを一度全部リセットして最初からつくり直したくなることがある。<br/>
とりあえずやり方を二つ</p>

<!--more-->


<h3>全てレコードを空にしたいようば場合</h3>

<ol>
<li>全てのテーブルをdrop</li>
<li><code>db/schema.rb</code>を元にテーブルを再作成</li>
</ol>


<pre><code class="ruby">$ rake db:reset
</code></pre>

<h3>テーブル定義を変更思でで全てのレコードを空にしたいような場合</h3>

<ol>
<li>全てのテーブルをdrop</li>
<li><code>db/migrate</code>以下の全てのmigrationを実行してテーブルを再作成</li>
</ol>


<pre><code class="ruby">$ rake db:migrate:reset
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cloud9でMySQLを使う]]></title>
    <link href="http://blackhawk888.github.io/blog/2018/01/17/cloud9-mysql/"/>
    <updated>2018-01-17T15:30:03+00:00</updated>
    <id>http://blackhawk888.github.io/blog/2018/01/17/cloud9-mysql</id>
    <content type="html"><![CDATA[<p>Cloud9でRailsテンプレートを作成すると最初はSQLiteを使うようになっているが
MySQLが使えるようなので設定を変更してみる</p>

<!--more-->


<p><code>Gemfile</code>を編集
sqlite3をコメントアウトし、<code>gem 'mysql2', '~&gt; 0.3.20'</code>を追加</p>

<p><figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Use sqlite3 as the database for Active Record&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">sqlite3</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;gem &amp;lsquo;mysql2&amp;rsquo;, &amp;lsquo;~&gt; 0.3.20&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>インストール</p>

<pre><code class="ruby">$ bundle install
</code></pre>

<p>database接続に必要な<code>config/database.yml</code>の編集<br/>
今回はCloud9が用意しているDBを使用する。<br/>
ローカルで動かしているなら、自分で作ったDB名とユーザー名いれて、
hostにはlocalhostって入れれば接続できる。</p>

<p><figure class='code'><figcaption><span>config/database.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">adapter</span><span class="p">:</span> <span class="n">mysql2</span>
</span><span class='line'>    <span class="ss">encoding</span><span class="p">:</span> <span class="n">utf8</span>
</span><span class='line'>    <span class="ss">database</span><span class="p">:</span> <span class="n">c9</span>
</span><span class='line'>    <span class="ss">username</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%=ENV[&amp;lsquo;C9_USER&amp;rsquo;]%&gt;</span>
</span><span class='line'><span class="sx">    host: &amp;lt;%=</span><span class="no">ENV</span><span class="o">[&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">IP</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">]%&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>MySQL起動</p>

<pre><code class="bash">$ mysql-ctl start
</code></pre>

<p>あとはDBも接続できたので<code>rails g model XXXX</code>・・・・・<code>rake db:migrate</code>を
実行するだけ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsをbundlerでプロジェクト毎に管理する]]></title>
    <link href="http://blackhawk888.github.io/blog/2018/01/17/rails-bundler-project/"/>
    <updated>2018-01-17T15:10:50+00:00</updated>
    <id>http://blackhawk888.github.io/blog/2018/01/17/rails-bundler-project</id>
    <content type="html"><![CDATA[<p><code>gem install rails</code>を実行すると大量の依存gemがシステムにインストールされてしまうので
Rails自体もbundlerでプロジェクトごとにインストールする。</p>

<!--more-->


<pre><code>$ mkdir hoge
$ cd Hoge
</code></pre>

<p><code>bundle init</code>で<code>Gemfile</code>の作成</p>

<pre><code class="ruby">$ bundle init
Writing new Gemfile to /xxx/xxxx/hoge/Gemfile
</code></pre>

<p>Gemfileで<code>rails</code>gemを指定</p>

<p><figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;https://rubygems.org&quot;</span><span class="o">&gt;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">rubygems</span><span class="o">.</span><span class="n">org</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">gem</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">rails</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>railsをbundlerで指定のデュレクトリにインストール</p>

<pre><code class="ruby">$ bundle install --path vendor/bundle
</code></pre>

<p><code>bundle exec rails new .</code>でカレントデュレクトリにRailsプロジェクトを作成
Gemfileを上書きしてよいか聞かれるので<code>Y</code>を打つ。</p>

<pre><code class="ruby">$ bundle exec rrails new .

      exist
      create  README.rdoc
      create  Rakefile
      create  config.ru
      create  .gitignore
    conflict  Gemfile
 Overwrite /home/vagrant/sandbox/Gemfile? (enter "h" for help) [Ynaqdh]
</code></pre>

<p>サーバ起動</p>

<pre><code class="ruby">$ bundle exec rails s
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ERBにコメントを入れる方法]]></title>
    <link href="http://blackhawk888.github.io/blog/2018/01/17/erb-comment/"/>
    <updated>2018-01-17T10:44:10+00:00</updated>
    <id>http://blackhawk888.github.io/blog/2018/01/17/erb-comment</id>
    <content type="html"><![CDATA[<p>ERBのコメントの方法を忘れるのでメモ。</p>

<!--more-->


<h2>行コメント</h2>

<p>一般的なコメントアウトは<code>#</code>を使うコメント。</p>

<pre><code>&lt;%# コメントです。表示されません。%%&gt;
</code></pre>

<p><code>false</code>を使うコメント方法</p>

<pre><code>&lt;% if false %&gt; コメントです。表示されません。 &lt;% end %&gt;
</code></pre>

<p><code>false</code>を使うことでERBのコードもコメントアウトできる。</p>

<pre><code>&lt;% if false %&gt; コメントです。表示されません。 &lt;%= @example.message %&gt;&lt;% end %&gt;
</code></pre>

<h2>複数行コメント</h2>

<p>記号は変わらない。複数行でも、一般的なコメントアウトは<code>#</code>を使うコメント。</p>

<pre><code>&lt;%#
name: Example test
コメントです。表示されません。
%&gt;
</code></pre>

<p><code>false</code>は2つのERBコードに分かれているので、複数行にもできる。</p>

<pre><code>&lt;% if false %&gt;
name: Example test
コメントです。表示されません。
&lt; % end %&gt;
</code></pre>

<p><code>false</code>は2つのERBコードもコメントアウトできる。ERBコードを含む長いコードをコメントアウトする時は便利。</p>

<pre><code>&lt;% if false %&gt;
name: Example test
コメントです。表示されません。
&lt;%= @example.text %&gt;
&lt;% end %&gt;
</code></pre>

<p>rubyなので<code>begin</code>,<code>end</code>もある。</p>

<pre><code>&lt;%
=begin
name: Example test
コメントです。表示されません。
=end
%&gt;
</code></pre>

<p><code>begin</code>,<code>end</code>は分けられるし、ERBコードも挟める。</p>

<pre><code>&lt;% =begin %&gt;
name: Example test
コメントです。表示されません。
&lt;%= @example.text %&gt;
&lt;% =end %&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
